; ====================
; A number of helpful functions to check your designs, export to CAD, 
; update your design in CAD, etc.
; ====================
#use-added-syntax(jitx)
defpackage nRF :
  import core
  import jitx
  import jitx/commands
  import ocdb/utils/checks
  import ocdb/utils/generic-components
  import ocdb/utils/generator-utils
  import ocdb/utils/property-structs
  import ocdb/utils/defaults
  import ocdb/utils/design-vars

  import bundles
  import jsl/bundles
  import jsl/si
  import helpers

public pcb-module nRF-mcu :
  port supply : power
  port i2c-bus : i2c

  port ant
  port wake
  port vdda-en
  port mic-in

  ; Nordic MCU with Wireless Interface
  public inst nrf : components/Nordic-Semicon/NRF52840-QIAA-R/module(include-LFO? = false, include-antenna? = false, power-config = 6)
  net (supply, nrf.vin)
  topo-net(ant, nrf.mcu.ANT)
  ; set-signal-end(ant, nrf.mcu.ANT)
  ; rf-routing-structure(rf-constraint, nrf.mcu.ANT ant)

  require tap-detect:gpio from nrf.mcu
  net WAKE (wake, tap-detect.gpio)

  require voice:adc from nrf.mcu
  net (mic-in, voice.adc)

  require acc-i2c:i2c from nrf.mcu
  net I2C (i2c-bus, acc-i2c)

  require vdda-sw:gpio from nrf.mcu
  net (vdda-en, vdda-sw.gpio)

  add-open-drain-pullups(i2c-bus, supply.V+)

  require debug : swd(SWD-SWO) from nrf.mcu

  inst dbg-conn : smd-testpoint-cmp(0.75)[5]

  net (dbg-conn[0].p supply.V+)
  net (dbg-conn[1].p supply.V-)
  net (dbg-conn[2].p debug.swdclk)
  net (dbg-conn[3].p debug.swdio)
  net (dbg-conn[4].p debug.swo)

  for i in 0 to 5 do :
    component-status(dbg-conn[i]) :
      bom-status = NotInBOM

  ; Debugging - we will need to detect when we are connected to the
  ;   appropriate network.
  val RGB = rgb-indicator(5.0, nrf.mcu, supply.V+)

  schematic-group(self) = MCU


public pcb-module RF-frontend :
  port sig
  port gnd

  public inst ant : components/antenna/inverted-f-antenna
  public inst test : components/antenna/test-RF-conn

  net (gnd ant.gnd test.gnd)
  topo-net(sig => test.sig => ant.rf-in)

  set-signal-end(sig, ant.rf-in)

  ; rf-routing-structure(rf-constraint, sig ant.rf-in)
  ; rf-routing-structure(rf-constraint, sig test.sig)

  schematic-group(self) = RF
  layout-group(self) = RF-layout
