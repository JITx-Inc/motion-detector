#use-added-syntax(jitx)
defpackage scratch:
  import core
  import jitx
  import jitx/commands
  import ocdb/utils/bundles
  import ocdb/utils/checks
  import ocdb/utils/generic-components
  import ocdb/utils/generator-utils
  import ocdb/utils/design-vars

val board-shape = RoundedRectangle(28.0, 25.0, 3.0)

OPTIMIZE-FOR = ["area"]
DESIGN-QUANTITY = 100
OPERATING-TEMPERATURE = min-max(-40.0 90.0)


; Setup the board
defn setup-board () :
  set-board(ocdb/utils/defaults/default-board(ocdb/manufacturers/stackups/jlcpcb-jlc2313, board-shape))
  set-rules(ocdb/manufacturers/rules/jlcpcb-basic-rules)
  set-use-layout-groups()

pcb-module nrf-motion :

  inst j : pin-header(10)
  inst placed : chip-resistor(10.0)[10]

  net GND (j.p[1])
  net A : pin[10] ()

  for (l in grid-locs(5, 2, 3.0 2.0), i in 0 to false) do :
    place(placed[i]) at l on Top

    net (A[i] placed[i].p[1] j.p[i + 1])
    net (placed[i].p[2] GND)

    property(A[i].voltage) = min-max(4.8, 5.2)


  symbol(GND) = ocdb/utils/symbols/ground-sym
  property(GND.voltage) = typ(0.0)


  geom(GND) :
    copper-pour(LayerIndex(1), isolate = 0.2) = board-shape
    copper-pour(LayerIndex(2), isolate = 0.2) = board-shape
  
  ; property(VDD.net-class) = NetClass(`Power, [`min-trace => 0.35])

  ; Run the schematic review
  check-design(self)

set-current-design("scratch")
set-paper(ANSI-B)
setup-board()

val main-module = ocdb/utils/generator-utils/run-final-passes(nrf-motion) ; Analyze design with a pass
set-main-module(main-module) ; Treat the provided module as a design, and compile it.
run-checks("checks.txt")

; View the results
view-board()
view-schematic()
view-design-explorer()
