#use-added-syntax(jitx)
defpackage nrf-motion:
  import core
  import math
  import jitx
  import jitx/commands
  import ocdb/utils/bundles
  import ocdb/utils/checks
  import ocdb/utils/generic-components
  import ocdb/utils/placeholder-components
  import ocdb/utils/defaults

  import ocdb/utils/generator-utils
  import ocdb/utils/design-vars
  import ocdb/artwork/jitx-logo
  import amplifiers
  import helpers

public val board-shape = Rectangle(31.0, 20.0)

OPTIMIZE-FOR = ["area"]
OPERATING-TEMPERATURE = min-max(0.0 50.0)
MIN-PKG = "0402"

pcb-module nRF-mcu :
  port supply : power
  port i2c-bus : i2c

  pin ant
  pin wake
  pin vdda-en
  pin mic-in

  ; Nordic MCU with Wireless Interface
  inst nrf : components/Nordic-Semicon/NRF52840-QIAA-R/module(include-LFO? = false, include-antenna? = false, power-config = 6)
  net (supply, nrf.vin)
  net (ant, nrf.mcu.ANT)
  require tap-detect:gpio from nrf.mcu
  net WAKE (wake, tap-detect.gpio)

  require voice:adc from nrf.mcu
  net (mic-in, voice.adc)

  require acc-i2c:i2c from nrf.mcu
  net I2C (i2c-bus, acc-i2c)

  require vdda-sw:gpio from nrf.mcu
  net (vdda-en, vdda-sw.gpio)

  add-open-drain-pullups(i2c-bus, supply.vdd)

  require debug : swd-swo() from nrf.mcu

  inst dbg-conn : smd-testpoint-cmp(0.75)[5]

  net (dbg-conn[0].p supply.vdd)
  net (dbg-conn[1].p supply.gnd)
  net (dbg-conn[2].p debug.swdclk)
  net (dbg-conn[3].p debug.swdio)
  net (dbg-conn[4].p debug.swo)

  for i in 0 to 5 do :
    component-status(dbg-conn[i]) :
      bom-status = NotInBOM

  ; Debugging - we will need to detect when we are connected to the
  ;   appropriate network.
  val RGB = rgb-indicator(5.0, nrf.mcu, supply.vdd)

  schematic-group(self) = MCU


pcb-module RF-frontend :
  pin sig
  pin gnd

  public inst ant : components/antenna/inverted-f-antenna
  public inst test : components/antenna/test-RF-conn

  net (gnd ant.gnd test.gnd)
  net FEED (sig, ant.rf-in, test.sig)
  ; property(FEED.net-class) = CBCPW

  schematic-group(self) = RF
  layout-group(self) = RF-layout


pcb-module nrf-motion :

  ; Coin Cell
  inst bat : components/MYOUNG/MY-1632-03/module
  place(bat.holder) at loc(-2.4, 2.413, 0.0) on Bottom
  val vbat-range = min-max(2.8, 3.0)
  setup-supply-rail(bat.vout, vbat-range)

  ; MCU
  inst mcu : nRF-mcu

  ; Accelerometer
  inst xl : components/STMicroelectronics/LIS3DHTR/module

  ; MCU and Accelerometer (XL) are in the same power domain because
  ;   the XL will generate a WAKE signal to wake the MCU out of
  ;   sleep.
  net always-on (bat.vout, xl.power, mcu.supply)
  net (xl.vio, self.VDD)

  ; Connect the XL to the NRF's i2c bus
  net (mcu.i2c-bus, xl.i2c)
  ;  We use the interrupt from the XL to wake the
  ;   MCU from deep sleep
  net (mcu.wake, xl.int[1])

  ; RF Interface for the MCU
  inst RF : RF-frontend
  place(RF.ant.ant) at loc(9.556, 5.000, 270.0) on Top
  net (mcu.ant, RF.sig)
  net (self.GND RF.gnd)

  ; Power switch for the Analog Power Domain
  ;   We want to be able to turn this section off while we
  ;   are sleeping to reduce power usage.

  val PMOS_def = components/ON-Semiconductor/NTA4151PT1G/component
  inst load-sw : load-switch/high-side-mosfet-switch(PMOS_def)

  net (always-on, load-sw.vin)
  net (mcu.vdda-en, load-sw.control)

  ; Establish a Supply rail for the output of the load switch
  ;   and give it is own symbol for clarity.
  net VDDA (load-sw.vout.vdd)
  symbol(VDDA) = ocdb/utils/symbols/supply-sym
  property(VDDA.voltage) = vbat-range

  ; Analog Interface
  inst mic : components/ALLPOWER-ShenZhen-Quan-Li-Semiconductor-/AP3722AT/component
  ; Gain bandwidth of this opamp is insufficient and causes the low pass
  ;   edge of the bandpass to be lower than expected.
  ; val OpAmpType = components/Microchip-Tech/MCP6001T-EOT/component
  ; This opamp shows proper corner frequency at 20kHz as expected.
  val OpAmpType = components/STMicroelectronics/TS971ILT/component

  val bandpass = BandpassConfig(34.0, 100.0, 20.0e3)
  val preampType = amplifiers/microphone-preamp(OpAmpType, bandpass)
  inst amp : preampType

  schematic-group([mic, amp]) = audio

  ; Add the analog to the switchable power domain for low power
  ;   operation.
  net (load-sw.vout, amp.vin, mic.vin)

  ;  The foot bone's connected to the ankle bone
  ;  The ankle bone's connected to the mic bone
  ;  The mic bone is connected to the pre-amp bone
  net (mic.out, amp.in)
  ;  The pre-amp bone is connected to the ADC bone
  net (amp.out, mcu.mic-in)

  net GND (self.GND)
  net VDD (self.VDD)
  property(GND.net-class)  = NetClass(`Gnd, [`min-trace => 0.150])
  property(VDDA.net-class) = NetClass(`Vdda, [`min-trace => 0.200])

  via-stitch(board-shape, GND)

  ; geom(VDD) :
  ;   copper-pour(LayerIndex(0,    Top), isolate = 0.1, rank = 99) = RoundedRectangle(2.0, 2.0, 0.2, loc(-10.200, -2.500))
    ; copper-pour(LayerIndex(0, Bottom), isolate = 0.1, rank = 99) = RoundedRectangle(3.0, 3.0, 0.2, loc(-11.70, 0.00))

  ; Run the schematic review
  check-design(self)

; set-current-design("nrf-pours")

for disti in ["DigiKey" "Mouser" "JLCPCB"] do :
  for qty in [10 10000] do :
    val d-name = to-string("nrf-%_-%_" % [disti qty])
    set-current-design(d-name)
    setup-bill-of-materials(qty, disti)

    set-paper(ANSI-B)
    setup-board(board-shape)

    var main-module = ocdb/utils/generator-utils/run-final-passes(nrf-motion) ; Analyze design with a pass
    set-main-module(main-module) ; Treat the provided module as a design, and compile it.

    ; run-checks("checks.txt")
    ; View the results
    ; view-design-explorer()
    view-schematic()
    view-board()
    bom-view-export()


